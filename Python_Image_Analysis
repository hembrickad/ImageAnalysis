import os
import sys
import random 
import config as cfg
import numpy as np
import collections
import pandas as pd
from PIL import Image
from random import randint     
import matplotlib.pyplot as plt
from time import perf_counter

#LISTS FOR AVERAGING
cells = [[],[],[],[],[],[],[]]
histoTotal = [[],[],[],[],[],[],[]]
arrayTotal = [[],[],[],[],[],[],[]]
MSQE = [[],[],[],[],[],[],[]]
timeSheet = dict()

#RANDOM METHODS
def intp(image, histo):
    for x in image:
        for n in x:
            n[0] = histo[n[0]] + (n[0] - (n[0] + 1))*((histo[n[0]+1]-histo[n[0]])/((n[0]+1)-n[0]))
            n[1] = n[0]
            n[2] = n[0]
    return image

def median(l):
    if len(l)%2 != 0:
       return l[round(len(l)/2)]
    else:
        return int((l[int(len(l)//2)] + l[int(len(l)//2 + 1)])//2)

def msqe(qArray, rArray):
    num = 0
    for x in len(rArray):
        num += np.square(rArray - qArray)
    return num/len(rArray)
    
def time(process, lis):
    num = 0
    for x in lis:
        num += x
    return num/len(lis)

#SPECTRUM MANIPULATION
"""
"""    
def pixel_val_grey(image, channel = "b"):
    array = np.array(image)
    num = 0
    for x in array:
        for n in x:
            if channel == "r":
                n[1] = n[0]
                n[2] = n[0]
            elif channel == "g":
                n[1] = n[2]
                n[0] = n[2]
            elif channel == "b":
                n[0] = n[1]
                n[2] = n[1]
            else:
                num = (int(n[0])+int(n[1])+int(n[2]))/3
                n[0] = num
                n[1] = num
                n[2] = num
    return array
"""
"""
def pixel_val_color(image, channel = "r"):
    array = np.array(image)
    for x in array:
        for n in x:
            if channel == "r":
                n[1] = 0
                n[2] = 0
            elif channel == "b":
                n[1] = 0
                n[0] = 0
            elif channel == "g":
                n[0] = 0
                n[2] = 0
    return array

#NOISE FUNCTIONS
"""
Impliment the salt and pepper function whith a variation of strength between 0-100. The strength(str) defaults to 10
"""
def snp(array, str = 10):
    num = 0
    if str <1: 
        return array
    else:
        for x in array:
            for n in x:
                r = randint(0, 100)
                if(r < str):
                    if(r %2 == 0):
                        n[0] = 0
                        n[1] = 0
                        n[2] = 0
                    else:
                        n[0] = 255
                        n[1] = 255
                        n[2] = 255
    return array                   
"""
Shifts the pixel values between the range of -str to str randomly. It defaults to strength 10
"""
def gausNoise(array, str = 10):
    num = 0
    if str == 0:
        return array
    else:
        for x in array:
            for n in x:
                num = randint(str*-1, str)
                n[0] += num 
                if n[0] < 0:
                    n[0] = 0
                elif n[0]> 255:
                    n[0] = 255
                n[1]=n[0]
                n[2]=n[0]
    return array
"""
Shifts the pixel values between the range of -str to str randomly. It defaults to strength 10
"""
def speck(array, str = 75):
    num = 0
    if str == 0:
        return array
    elif str <= 100:
        for x in array:
            for n in x:
                num = random.uniform((str*-1)/100, str/100)
                n[0] *=(1+num)
                if n[0] < 0:
                    n[0] = 0
                elif n[0]> 255:
                    n[0] = 255
                n[1]=n[0]
                n[2]=n[0]
    return array

#FILTERS
def LFilter(array, image, user = 1, scale = 1):
    w,h = image.size
    nArray = array
    l = []
    for n in range(len(array)):
        for i in range(n):
            """index = i + (w * n)
            row, col = n , i

            x = np.arange(max(col - user, 0), min(col + user + 1, w))
            y = np.arange(max(row - user, 0), min(row + user + 1, h))"""

            x = np.arange(-1*user, user)
            X,Y = np.meshgrid(x,y)

            plt.plot(X, Y, marker = '.', color = 'k', linestyle = 'none')
            plt.show()
            nbh = np.sqrt(((X)**2 + (Y)**2))

            m = (nbh < user)

            
            print (nbh, '\n')

            for j in range(len(Y[m])):
                l.append(array[0][Y[m][j]][X[m][j]])
            #median(np.sort(l))
            l =[]


def MFilter(array, image, user = 1, scale = 1):
    w,h = image.size
    nArray = array
    for n in range(len(array)):
        for i in range(n):
            index = i + (n * w)
            row, col = index // w, index%w

            x = np.arange(max(col - user, 0), min(col + user + 1, w))
            y = np.arange(max(row - user, 0), min(row + user + 1, h))

            X,Y = np.meshgrid(x,y)

            nbh = np.sqrt(((X - col)**2 + (Y - row)**2))

            m = nbh < user

            print(m)

#HISTOGRAMS    
"""
"""
def visualize(histo):
    x = []
    for n in range(256):
        x.append(n)
    fig = plt.figure()  
    ax = fig.add_axes([0,0,1,1])
    ax.bar(x,histo)
    ax.set_facecolor('xkcd:black')
    plt.bar(x, histo, color=['white'])
    plt.tight_layout()
    plt.show()
"""
"""
def histo_one(array):
    histo = [0] * 256
    for x in array:
        for n in x:
            histo[n[0]] += 1
    #visualize(histo)
    return histo
"""
"""
def histo_equal(array, histo):
    cd = [0] * len(histo)
    cd[0] = histo[0]
    for i in range(1, len(histo)):
        cd[i] = cd[i-1]+histo[i]
    cd = [x * 255 / cd[-1] for x in cd]
    arr = intp(array, cd) 
    return arr

#Not Finished
def histo_quant(array, histo, size = 2):
    num = 256%size
    





    for x in array:
        for n in x:
            n[0] = histo[n[0]]
            n[1] = n[0]
            n[2] = n[0]


"""
"""
def histo_avg(l):
    t = 0
    total= 0
    num = len(l)
    l = [sum(i) for i in zip(*l)]
    l = [n / num for n in l]



#Stats and Prep
def input(directory):
    for fil in os.listdir(directory):
        if fil.endswith(".BMP"):
            if fil.startswith("para"):
                cells[0].append(Image.open(directory + fil))
            elif fil.startswith("cyl"):
                cells[1].append(Image.open(directory + fil))
            elif fil.startswith("super"):
                cells[2].append(Image.open(directory + fil))
            elif fil.startswith("inter"):
                cells[3].append(Image.open(directory + fil))
            elif fil.startswith("let"):
                cells[4].append(Image.open(directory + fil)) 
            elif fil.startswith("mod"):
                cells[5].append(Image.open(directory + fil))
            elif fil.startswith("svar"):
                cells[6].append(Image.open(directory + fil))

def config():
    t = 0
    total = 0
    histo = []
    im_arr = []

    if(cfg.config['DEFAULT']['pixel_val_grey']['run'] == 'True'):
        timeSheet['grey'] = []
        total = 0

        for x in cells:
            t = perf_counter()
            for n in x:
                im_arr.append(pixel_val_grey(image, cfg.config['DEFAULT']['pixel_val_grey']['channel']))
            arrayTotal.append(im_arr.copy())
            im_arr = []

            total += perf_counter() - t
            timeSheet['grey'].append(perf_counter() - t)
        timeSheet['grey'].append(total)
        timeSheet['grey'].append(total/499)

    if(config['OTHER']['pixel_val_color']['run'] == 'True'):
        timeSheet['color'] = []
        total = 0

        for x in cells:
            t = perf_counter()
            for n in x:
                im_arr.append(pixel_val_color(image, cfg.config['OTHER']['pixel_val_color']['channel']))
            arrayTotal.append(im_arr.copy())
            im_arr = []

            total += perf_counter() - t
            timeSheet['color'].append(perf_counter() - t)
        timeSheet['color'].append(total)
        timeSheet['color'].append(total/499)

    if(cfg.config['OTHER']['snp']['run'] == 'True'):
        timeSheet['snp'] = []
        total = 0

        for x in arrayTotal:
            t = perf_counter()
            for n in x:
                n = snp(im_arr,cfg. config['OTHER']['snp']['strength'])

            total += perf_counter() - t
            timeSheet['snp'].append(perf_counter() - t)
        timeSheet['snp'].append(total)
        timeSheet['snp'].append(total/499)

    if(cfg.config['OTHER']['gausNoise']['run'] == 'True'):
        timeSheet['gausNoise'] = []
        total = 0

        for x in arrayTotal:
            t = perf_counter()
            for n in x:
                n = snp(im_arr,cfg. config['OTHER']['gausNoise']['strength'])

            total += perf_counter() - t
            timeSheet['gausNoise'].append(perf_counter() - t)
        timeSheet['gausNoise'].append(total)
        timeSheet['gausNoise'].append(total/499)

    if(cfg.config['OTHER']['speckle']['run'] == 'True'):
        timeSheet['speckle'] = []
        total = 0

        for x in arrayTotal:
            t = perf_counter()
            for n in x:
                n = snp(im_arr,cfg. config['OTHER']['speckle']['strength'])

            total += perf_counter() - t
            timeSheet['speckle'].append(perf_counter() - t)
        timeSheet['speckle'].append(total)
        timeSheet['speckle'].append(total/499)     

    if(cfg.config['DEFAULT']['histo_one']['run'] == 'True'):
        timeSheet['Histo'] = []
        total = 0

        for x in arrayTotal:
            t = perf_counter()
            for n in x:
                histo.append(histo_one(x))
            histoTotal.append(histo.copy())
            histo = []
            
            total += perf_counter() - t
            timeSheet['Histo'].append(perf_counter() - t)
        timeSheet['Histo'].append(total)
        timeSheet['Histo'].append(total/499)

    if(cfg.config['DEFAULT']['histo_avg']['run'] == 'True'):
        timeSheet['HistoAVG'] = []
        total = 0

        for x in histoTotal:
            t = perf_counter()
            histo_avg(x)

            total += perf_counter() - t
            timeSheet['HistoAVG'].append(perf_counter() - t)
        timeSheet['HistoAVG'].append(total)
        timeSheet['HistoAVG'].append(total/499)



    if(cfg.config['OTHER']['histo_equal']['run'] == 'True'):
        timeSheet['Equal'] = []
        pass
    if(cfg.config['OTHER']['histo_quant']['run'] == 'True'):
        pass
    if(cfg.config['OTHER']['LFilter']['run'] == 'True'):
        pass
    if(cfg.config['OTHER']['MFilter']['run'] == 'True'):
        pass






def main():
    path = "/Users/Adhsketch/Desktop/repos/ImageAnalysis/cell_smears/"
    #im_org = Image.open(path)
    #f = open('config.py', r)
    t = 0
    total= 0
    HistoList = []
    im_arr = []
    #print(cfg.config['DEFAULT']['pixel_val_grey'])
    input(cfg.config['DEFAULT']['directory'])
    config()

    pd.Dataframe.from_dict(timeSheet)
    


    #LFilter(im_arr,im_org)
    #im_arr = speck(im_arr, 25)
    #im_hist = histo_one(im_arr)
    #equal = histo_equal(im_arr, im_hist)
    #im_hist = histo_one(equal)
    #i =histo_quant(im_array, im_arr)
    #im_new = Image.fromarray(im_arr)
    #im_new = im_new.save("New_Image.BMP")


if __name__ == "__main__":
    main()   