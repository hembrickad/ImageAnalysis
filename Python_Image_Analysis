import sys
from PIL import Image
import numpy as np
from collections import defaultdict
from random import randint

"""
Randomizes whether of not pixel is changed or not and to what value
"""
def snp_rand(val, div):
    r = randint(0, 1000)
    if(r < 1000//div):
        if(r %2 == 0):
            return 0
        else:
            return 255
    return val
"""
Impliment the salt and pepper function whith a variation of strength between 1-3
"""
def snp(array, str = 1):
    num = 0
    if str <1: 
        return array
    elif str == 1:
        for x in array:
            for n in x:
                num = snp_rand(n[0], 50)
                n[0] = num
                n[1] = num
                n[2] = num
    elif str == 2:
        for x in array:
            for n in x:
                num = snp_rand(n[0], 10)
                n[0] = num
                n[1] = num
                n[2] = num
    else:
        for x in array:
            for n in x:
                num = snp_rand(n[0], 5)
                n[0] = num
                n[1] = num
                n[2] = num  
    return array
"""
Shifts the pixel values between the range of -str to str randomly. It defaults to strength 10
"""
def gausNoise(array, str = 10):
    num = 0
    if str == 0:
        return array
    else:
        for x in array:
            for n in x:
                num = randint(str*-1, str)
                n[0] += num 
                if n[0] < 0:
                    n[0] = 0
                elif n[0]> 255:
                    n[0] = 255
                n[1]=n[0]
                n[2]=n[0]
    return array

    



#Not Finished
def visualize(histo):
    pass 

def reImage(histo):
    pass
#Not Finished
def histo_avg(HistoList):
    pass
#Not Finished
def histo_one(array):
    histo = [0] * 256
    for x in array:
        for n in x:
            histo[n[0]] += 1
    #visualize()
    return histo
#Not Finished
def histo_equal(histo, array):
    pass
#Not Finished
def histo_quant(histo, array, user = 2):
    quant = [0] * (len(histo)//user + 1)
    x = []
    y = []
    binhist = []
    for i in range(len(histo)):
        while i%user != 0:
            x.append(i)
        y.append(x.copy())
        x = []
    for i in y:
        pass

  

"""
"""    
def pixel_val(image, channel = "g"):
    array = np.array(image)
    for x in array:
        for n in x:
            if channel == "r":
                n[1] = n[0]
                n[2] = n[0]
            elif channel == "g":
                n[1] = n[2]
                n[0] = n[2]
            elif channel == "b":
                n[0] = n[1]
                n[2] = n[1]
    return array
    


# order of input is "python <name> <path> <channel> <function1> ...."
def main():
    w = 0
    h = 0
    argc = len(sys.argv)
    argv = str(sys.argv)
    path = "/Users/Adhsketch/Desktop/repos/ImageAnalysis/let51.BMP"
    im_org = Image.open(path)
    w,h = im_org.size
    im_new = im_org

    im_arr = pixel_val(im_org)
    im_arr = gausNoise(im_arr,150)
    #im_array = histo_one(im_arr)
    #i =histo_quant(im_array, im_arr)
    im_new = Image.fromarray(im_arr)
    im_new = im_new.save("New_Image.BMP", "BMP")


if __name__ == "__main__":
    main()   