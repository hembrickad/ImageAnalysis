import sys
import pandas as pd
from PIL import Image
import numpy as np
import random 
from random import randint
import matplotlib.pyplot as plt
from time import process_time as pt
#LISTS FOR AVERAGING
h_avg = []
#RANDOM METHODS
def intp(image, histo):
    for x in image:
        for n in x:
            n[0] = histo[n[0]] + (n[0] - (n[0] + 1))*((histo[n[0]+1]-histo[n[0]])/((n[0]+1)-n[0]))
            n[1] = n[0]
            n[2] = n[0]
    return image

#SPECTRUM MANIPULATION
"""
"""    
def pixel_val_grey(image, channel = "k"):
    array = np.array(image)
    num = 0
    for x in array:
        for n in x:
            if channel == "r":
                n[1] = n[0]
                n[2] = n[0]
            elif channel == "g":
                n[1] = n[2]
                n[0] = n[2]
            elif channel == "b":
                n[0] = n[1]
                n[2] = n[1]
            else:
                num = (int(n[0])+int(n[1])+int(n[2]))/3
                n[0] = num
                n[1] = num
                n[2] = num
    return array
"""
"""
def pixel_val_color(image, channel = "r"):
    array = np.array(image)
    for x in array:
        for n in x:
            if channel == "r":
                n[1] = 0
                n[2] = 0
            elif channel == "b":
                n[1] = 0
                n[0] = 0
            elif channel == "g":
                n[0] = 0
                n[2] = 0
    return array

#NOISE FUNCTIONS
"""
Impliment the salt and pepper function whith a variation of strength between 0-100. The strength(str) defaults to 10
"""
def snp(array, str = 10):
    num = 0
    if str <1: 
        return array
    else:
        for x in array:
            for n in x:
                r = randint(0, 100)
                if(r < str):
                    if(r %2 == 0):
                        n[0] = 0
                        n[1] = 0
                        n[2] = 0
                    else:
                        n[0] = 255
                        n[1] = 255
                        n[2] = 255
    return array                   
"""
Shifts the pixel values between the range of -str to str randomly. It defaults to strength 10
"""
def gausNoise(array, str = 10):
    num = 0
    if str == 0:
        return array
    else:
        for x in array:
            for n in x:
                num = randint(str*-1, str)
                n[0] += num 
                if n[0] < 0:
                    n[0] = 0
                elif n[0]> 255:
                    n[0] = 255
                n[1]=n[0]
                n[2]=n[0]
    return array
"""
Shifts the pixel values between the range of -str to str randomly. It defaults to strength 10
"""
def speck(array, str = 75):
    num = 0
    if str == 0:
        return array
    elif str <= 100:
        for x in array:
            for n in x:
                num = random.uniform((str*-1)/100, str/100)
                n[0] *=(1+num)
                if n[0] < 0:
                    n[0] = 0
                elif n[0]> 255:
                    n[0] = 255
                n[1]=n[0]
                n[2]=n[0]
    return array

#FILTERS
def LFilter(array, user1, scale):
    pass
def MFilter(array, user1, scale):
    pass

#EXTRA
def blur():
    pass
def sharpen():
    pass

#HISTOGRAMS    
"""
"""
def visualize(histo):
    x = []
    for n in range(256):
        x.append(n)
    fig = plt.figure()  
    ax = fig.add_axes([0,0,1,1])
    ax.bar(x,histo)
    ax.set_facecolor('xkcd:black')
    plt.bar(x, histo, color=['white'])
    plt.tight_layout()
    plt.show()
"""
"""
def histo_one(array):
    histo = [0] * 256
    for x in array:
        for n in x:
            histo[n[0]] += 1
    #visualize(histo)
    return histo
"""
"""
def histo_equal(array, histo):
    cd = [0] * len(histo)
    cd[0] = histo[0]
    for i in range(1, len(histo)):
        cd[i] = cd[i-1]+histo[i]
    cd = [x * 255 / cd[-1] for x in cd]

    arr = intp(array, cd) 
    return arr

#Not Finished
def histo_quant(histo, array, size = 2):
    quant = [0] * (len(histo)//user + 1)
    x = []
    y = []
    binhist = []
    for i in range(len(histo)):
        while i%user != 0:
            x.append(i)
        y.append(x.copy())
        x = []
    for i in y:
        pass   
#Not Finished
def histo_avg(HistoList):
    pass



  




# order of input is "python <name> <path> <channel> <function1> ...."
def main():
    argc = len(sys.argv)
    argv = str(sys.argv)
    path = "/Users/Adhsketch/Desktop/repos/ImageAnalysis/Peppers.png"
    im_org = Image.open(path)
    w,h = im_org.size

    im_arr = pixel_val_grey(im_org, "k")
    im_arr = speck(im_arr)
    im_hist = histo_one(im_arr)
    #equal = histo_equal(im_arr, im_hist)
    #im_hist = histo_one(equal)
    #i =histo_quant(im_array, im_arr)
    im_new = Image.fromarray(im_arr)
    im_new = im_new.save("New_Image.png")


if __name__ == "__main__":
    main()   